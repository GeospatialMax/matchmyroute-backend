import { ISwaggerEndpoint } from "../../../common/interfaces";

// /////////////////////////////////////////////////////////////
// SWAGGER: start                                             //
// KEEP THIS UP-TO-DATE WHEN MAKING ANY CHANGES TO THE METHOD //
// /////////////////////////////////////////////////////////////

// PATH
const paths = {
    get: {
        consumes: ["application/json"],
        description: "A microservice API endpoint.",
        produces: ["application/json; charset=utf-8"],
        responses: {
            200: {
                description: "A message.",
                example: { message: "hello world" },
                schema: {
                    $ref: "#/definitions/APIMessage",
                },
            },
            default: {
                description: "unexpected error",
                schema: {
                  $ref: "#/definitions/Error",
                },
            },
        },
        tags: [
            "{{ camelCase endpointName }}",
        ],
    },
};

// DEFINITIONS
const definitions = {};

// ///////////////
// SWAGGER: END //
// ///////////////

// Handle request
export const getService = options => {
    const seneca = options.seneca;

    // expose the role:api,path:calculate pattern via the api
    seneca.add("role:api,path:{{ camelCase endpointName }}", (msg, respond) => {
        try {
            seneca.act("role:{{ camelCase serviceName }}", {
                $fatal: false,
                cmd: "get",
            }, respond);
        } catch (err) {
            return respond(null, err);
        }
    });
};

const routes = { {{ camelCase endpointName }}: { GET: true } };

export const get: ISwaggerEndpoint = {
    definitions,
    get: getService,
    paths,
    routes,
};
