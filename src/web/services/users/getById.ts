import { APIEndpoint } from "../api-endpoint";

// /////////////////////////////////////////////////////////////
// SWAGGER: start                                             //
// KEEP THIS UP-TO-DATE WHEN MAKING ANY CHANGES TO THE METHOD //
// /////////////////////////////////////////////////////////////

// PATH
const path = {
    get: {
        consumes: ["application/json"],
        description: "Returns an user matching the passed ID. If the user is not present, an empty object will be " +
        "returned. It means that even if the user exists in firebase, it doesn't have any extra details that we want" +
        " to save such as special roles, bough images etc...",
        parameters: [{
            description: "The ID of the user to be returned",
            in: "path",
            name: "id",
            type: "string",
        }, {
            description: "The idtoken as generated by firebase. Only the current owner and admin can search from " +
                         "himself.",
            in: "header",
            name: "idtoken",
            type: "string",
        }],
        produces: ["application/json; charset=utf-8"],
        responses: {
            200: {
                description: "A welcome message.",
                schema: {
                    $ref: "#/definitions/APIMessage",
                },
            },
            default: {
                description: "unexpected error",
                schema: {
                  $ref: "#/definitions/Error",
                },
            },
        },
        tags: [
            "users",
        ],
    },
};

// ///////////////
// SWAGGER: END //
// ///////////////

export const getById = new APIEndpoint({
        cmd: "getById",
        path: "load",
        role: "user",
    })
    .addPath(path);
