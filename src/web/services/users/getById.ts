import { Kind } from "../../../common/services/plugins/models";
import { authorizer } from "../../../common/utilities/auth";
import { datastore, datastoreRunQuery } from "../../../common/utilities/datastore";
import { MicroserviceEndpoint } from "../microservice-endpoint";

import * as Maybe from "data.maybe";
import * as _ from "lodash";
import * as logger from "winston";

// /////////////////////////////////////////////////////////////
// SWAGGER: start                                             //
// KEEP THIS UP-TO-DATE WHEN MAKING ANY CHANGES TO THE METHOD //
// /////////////////////////////////////////////////////////////

// OPERATION
const operation = {
    get: {
        consumes: ["application/json"],
        description: "Returns an user matching the passed ID. If the user is not present, an empty object will be " +
        "returned. It means that even if the user exists in firebase, it doesn't have any extra details that we want" +
        " to save such as special roles, bought images etc...",
        parameters: [
            {
                description: "The ID of the user to be returned",
                in: "path",
                name: "id",
                required: true,
                type: "string",
            }, {
                description: "The idtoken as generated by firebase. Only the current owner and admin can search from " +
                             "himself.",
                in: "header",
                name: "idtoken",
                required: true,
                type: "string",
            },
        ],
        produces: ["application/json; charset=utf-8"],
        responses: {
            200: {
                description: "A welcome message.",
                schema: {
                    $ref: "#/definitions/APIMessage",
                },
            },
            default: {
                description: "unexpected error",
                schema: {
                  $ref: "#/definitions/Error",
                },
            },
        },
        tags: [
            "users",
        ],
    },
};

// ///////////////
// SWAGGER: end //
// ///////////////

// ////////////////
// SENECA: start //
// ////////////////

const service = (params): any => {
    const kind: Kind = "User";
    const id: string = Maybe.fromNullable(params.id).getOrElse("");
    const idtoken: string = Maybe.fromNullable(params.idtoken).getOrElse("");

    return new Promise((resolve, reject) => {
        authorizer.auth().verifyIdToken(idtoken)
            .then( decodedToken => {
                if (decodedToken.uid === id) {
                    const query = datastore.createQuery(kind)
                        .filter("__key__", "=", datastore.key([kind, id]));

                    console.time("getUserById");
                    datastoreRunQuery(query)
                        .then(result => {
                            const users = result[0];
                            const info = result[1];
                            logger.debug("entities", JSON.stringify(users));
                            logger.debug("info", JSON.stringify(info));
                            console.timeEnd("getUserById");

                            resolve(_.extend({}, users[0]));
                        });
                } else {
                    const err = {
                        message: `${decodedToken.uid} is not allowed to read user ${id}`,
                        status: 401,
                    };
                    console.log(err.message);
                    reject(err);
                }
            })
            .catch(error => {
                console.log(`Server error:  ${error}`);
                const err = {
                    message: "There was a problem with authorization",
                };
                reject(err);
            });
        }
    );
};

// //////////////
// SENECA: end //
// //////////////

export const getById = new MicroserviceEndpoint("loadUser")
    .addSwaggerOperation(operation)
    .addService(service);
