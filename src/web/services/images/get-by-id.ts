import * as Maybe from "data.maybe";

import { MicroserviceEndpoint } from "../microservice-endpoint";

import * as Auth from "../../common/auth";
import * as Datastore from "../../common/datastore";
import * as Storage from "../../common/storage";

// /////////////////////////////////////////////////////////////
// SWAGGER: start                                             //
// KEEP THIS UP-TO-DATE WHEN MAKING ANY CHANGES TO THE METHOD //
// /////////////////////////////////////////////////////////////

// OPERATION
const operation = {
    get: {
        consumes: ["application/json"],
        parameters: [{
                description: "The ID of the image to be returned",
                in: "path",
                name: "id",
                required: true,
                type: "string",
            }, {
                description: "if provided and different than false, it will only return an temporal URL",
                in: "query",
                name: "image-url",
                required: false,
                type: "boolean",
            }, {
                description: "The idtoken as generated by firebase. Only the current owner and admin can search from " +
                             "himself.",
                in: "header",
                name: "idtoken",
                required: false,
                type: "string",
            },
        ],
        produces: ["application/json; charset=utf-8"],
        responses: {
            200: {
                description: "A welcome message.",
                schema: {
                    $ref: "#/definitions/APIMessage",
                },
            },
            default: {
                description: "unexpected error",
                schema: {
                  $ref: "#/definitions/Error",
                },
            },
        },
        tags: [
            "images",
        ],
    },
};

// ///////////////
// SWAGGER: END //
// ///////////////

// ////////////////
// SENECA: start //
// ////////////////

const service = (broadcast: Function, params: any): Promise<any> => {
    // anything expect "false" would do
    const imageUrlOnly = Maybe.fromNullable(params["image-url"])
        .map( v => v !== "false" )
        .getOrElse(false);
    const idtoken = params.idtoken;
    const imageId = Number(params.id);

    if (imageUrlOnly) {
        return Auth.getImageLicense(idtoken, imageId)
            .then(license => {
                return Storage.genTempPubUrl(`images/${imageId}/${license}.jpg`);
            });
    } else {
        return Datastore.getImageById(imageId);
    }
};

// //////////////
// SENECA: end //
// //////////////

export const getById = new MicroserviceEndpoint("loadImage")
    .addSwaggerOperation(operation)
    .addService(service);
