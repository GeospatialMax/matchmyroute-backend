import { MicroserviceEndpoint } from "../microservice-endpoint";

import * as Auth from "../../common/auth";
import * as Datastore from "../../common/datastore";
import { ImageMetadataModel } from "../../common/ImageMetadataModel";

// /////////////////////////////////////////////////////////////
// SWAGGER: start                                             //
// KEEP THIS UP-TO-DATE WHEN MAKING ANY CHANGES TO THE METHOD //
// /////////////////////////////////////////////////////////////

// PATH
const operation = {
    post: {
        consumes: ["application/json"],
        description: "Gets an image, keywords and location, process the image creating a thumbnail and 4 other " +
        "formats and upload all of it into the DB",
        parameters: [{
                description: "Image data which contains the keywords, coordinates and image itself.",
                in: "body",
                name: "image",
                required: true,
                schema: {
                    $ref: "#/definitions/ImageUpload",
                },
            },
            {
                description: "The idtoken as generated by firebase. Only the current owner and admin can search from " +
                "himself.",
                in: "header",
                name: "idtoken",
                required: true,
                type: "string",
            },
        ],
        produces: ["application/json; charset=utf-8"],
        responses: {
            200: {
                description: "A image object",
                schema: {
                    $ref: "#/definitions/ImageMetadata",
                },
            },
            default: {
                description: "unexpected error",
                schema: {
                    $ref: "#/definitions/Error",
                },
            },
        },
        tags: [
            "images",
        ],
    },
};

// DEFINITIONS
const definitions = {
    Coordinates: {
        properties: {
            latitude: {
                type: "number",
            },
            longitude: {
                type: "number",
            },
        },
    },
    ImageMetadata: {
        properties: {
            keywords: {
                items: {
                    type: "string",
                },
                type: "array",
            },
            location: {
                schema: {
                    $ref: "#/definitions/Coordinates",
                },
            },
        },
    },
    ImageUpload: {
        properties: {
            file: {
                format: "binary",
                type: "string",
            },
            metadata: {
                schema: {
                    $ref: "#/definitions/ImageMetadata",
                },
            },
        },
    },
};
// ///////////////
// SWAGGER: END //
// ///////////////

const service = (broadcast: Function, params: any): Promise<any> => {
    const payLoad = params.body;
    const idtoken = params.idtoken;

    return Auth.isOwner(idtoken)
        .then(() => Datastore.saveImageMetadata(new ImageMetadataModel(payLoad.metadata)));
};

// TODO: add after for triggering images processing
// end point definition
export const post = new MicroserviceEndpoint("postImage")
    .addSwaggerOperation(operation)
    .addSwaggerDefinitions(definitions)
    .addService(service);
