import * as Auth from "../../common/auth";
import * as Datastore from "../../common/datastore";
import { ImageMetadataModel } from "../../common/ImageMetadataModel";

import { MicroserviceEndpoint } from "../../microservices-framework/web/services/microservice-endpoint";

import * as _ from "lodash";
import * as logger from "winston";

// /////////////////////////////////////////////////////////////
// SWAGGER: start                                             //
// KEEP THIS UP-TO-DATE WHEN MAKING ANY CHANGES TO THE METHOD //
// /////////////////////////////////////////////////////////////

// PATH
const operation = {
    post: {
        consumes: ["application/json"],
        description: "Gets an image, keywords and location, process the image creating a thumbnail and 4 other " +
        "formats and upload all of it into the DB",
        parameters: [{
                description: "Image data which contains the keywords, coordinates and image itself.",
                in: "body",
                name: "image",
                required: true,
                schema: {
                    $ref: "#/definitions/ImageUpload",
                },
            },
            {
                description: "The idtoken as generated by firebase. Only the current owner and admin can search from " +
                "himself.",
                in: "header",
                name: "idtoken",
                required: true,
                type: "string",
            },
        ],
        produces: ["application/json; charset=utf-8"],
        responses: {
            200: {
                description: "A image object",
                schema: {
                    $ref: "#/definitions/ImageMetadata",
                },
            },
            default: {
                description: "unexpected error",
                schema: {
                    $ref: "#/definitions/Error",
                },
            },
        },
        tags: [
            "images",
        ],
    },
};

// DEFINITIONS
const definitions = {
    Coordinates: {
        properties: {
            latitude: {
                type: "number",
            },
            longitude: {
                type: "number",
            },
        },
    },
    ImageMetadata: {
        properties: {
            keywords: {
                items: {
                    type: "string",
                },
                type: "array",
            },
            location: {
                schema: {
                    $ref: "#/definitions/Coordinates",
                },
            },
        },
    },
    ImageUpload: {
        properties: {
            fileUri: {
                type: "string",
            },
            metadata: {
                schema: {
                    $ref: "#/definitions/ImageMetadata",
                },
            },
        },
    },
};
// ///////////////
// SWAGGER: END //
// ///////////////

export const service = (broadcast: Function, params: any): Promise<any> => {
    const payLoad = params.body;
    const idtoken = params.idtoken;

    return Auth.isOwner(idtoken)
        .then(user => Datastore.saveImageMetadata(user.id, new ImageMetadataModel(payLoad.metadata)))
        .then(imageResultModel => {
            const id = imageResultModel.id;
            const originalImageOpts = { resize: { id } };
            const resizeImageOpts = [
                originalImageOpts,
                _.merge({}, originalImageOpts, { resize: { height: 100, public: true, type: "thumbnail" } }),
                _.merge({}, originalImageOpts, { resize: { public: true, type: "cc" } }),
                _.merge({}, originalImageOpts, { resize: { type: "personal" } }),
                _.merge({}, originalImageOpts, { resize: { type: "business" } }),
            ];

            return Promise.all(resizeImageOpts.map(opts => broadcast("resizeImage", _.merge({}, params, opts))))
                .then(result => {
                    result.map(fileRes => {
                        imageResultModel.images[fileRes.type] = fileRes.url;
                    });
                    return imageResultModel;
                })
                .catch(err => {
                    throw { err, id };
                });
        })
        .catch( error => {
            logger.error(error);

            if (error.err) {
                // revert error. If the reverting fails, nothing else can be done.
                Datastore.deleteImageMetadata(error.id)
                    .catch(logger.error);
                throw error.err;
            }

            throw error;
        });
};

// end point definition
export const post = new MicroserviceEndpoint("postImage")
    .addSwaggerOperation(operation)
    .addSwaggerDefinitions(definitions)
    .addService(service);
